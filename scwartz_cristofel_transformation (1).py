# -*- coding: utf-8 -*-
"""scwartz-cristofel-transformation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lRBdbOA3go-qfbC7xxhwzOk9f29t2Wr-
"""

import numpy as np
from scipy.integrate import quad
import csv

# Parameters
alpha1 = 0.5
alpha2 = 0.5

# Constants (example values)
Ar, Ai = 0, 0
Cr, Ci = 1, 0

# Small epsilon to avoid zero raised to negative powers
eps = 1e-12

# Piecewise arg(s) on real axis
def arg_s(s):
    return np.pi if s < 0 else 0

def arg_s1(s):
    return np.pi if s < 1 else 0

# Theta function
def theta_s(s):
    return (alpha1 - 1) * arg_s(s) + (alpha2 - 1) * arg_s1(s)

# Real part of integrand
def real_integrand(s):
    abs_s = max(abs(s), eps)
    abs_s1 = max(abs(s - 1), eps)
    angle = theta_s(s)
    return (abs_s**(alpha1 - 1)) * (abs_s1**(alpha2 - 1)) * np.cos(angle)

# Imaginary part of integrand
def imag_integrand(s):
    abs_s = max(abs(s), eps)
    abs_s1 = max(abs(s - 1), eps)
    angle = theta_s(s)
    return (abs_s**(alpha1 - 1)) * (abs_s1**(alpha2 - 1)) * np.sin(angle)

# Numeric integral of real part from 0 to t
def real_integral(t):
    val, err = quad(real_integrand, 0, t)
    return val

# Numeric integral of imaginary part from 0 to t
def imag_integral(t):
    val, err = quad(imag_integrand, 0, t)
    return val

# Parametric functions x(t), y(t)
def x_num(t):
    return Ar + Cr * real_integral(t) - Ci * imag_integral(t)

def y_num(t):
    return Ai + Ci * real_integral(t) + Cr * imag_integral(t)

# Range and step
t_start = 0
t_end = 10
t_step = 0.001

t_values = np.arange(t_start, t_end + t_step, t_step)

# Open CSV file to write
with open('sc_parametric_coordinates.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(['t', 'x', 'y'])  # header

    for t in t_values:
        x = x_num(t)
        y = y_num(t)
        writer.writerow([t, x, y])

print("CSV file 'sc_parametric_coordinates.csv' created with x,y coordinates.")